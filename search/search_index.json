{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#setuptools-wheel-twine-build-tool","title":"Setuptools / Wheel/ Twine Build Tool","text":"<p>Package Source Code</p> <ul> <li>pip3 install setuptools ; pip3 install wheel</li> <li>python3 setup.py sdist bdist_wheel</li> </ul> <p>Upload Package</p> <ul> <li>pip3 install twine</li> <li>twine upload dist/*</li> </ul>"},{"location":"#poetry-build-tool","title":"Poetry Build Tool","text":"<ul> <li>Activating the virtual environment:poetry shell</li> <li>add deps:poetry add xxx (poetry add <code>cat requirements.txt</code>) or poetry install</li> <li>poetry build | pip3 install dist/padb-1.2.0-py3-none-any.whl --force</li> <li>\u5f00\u53d1\u8c03\u8bd5\uff1a  poetry build | poetry run python src/main.py --help</li> <li>\u53d1\u5e03\uff1apoetry build  | poetry publish</li> </ul>"},{"location":"#reference","title":"Reference:","text":"<p>awesome adb</p> <p>Android\u3011ADB\u5de5\u5177\u539f\u7406\u63a2\u7a76</p> <p>python\u4ee3\u7801\u89c4\u8303</p> <p>poetry-monorepo</p> <p>python-monorepo</p> <p>tweag / python-monorepo-example</p> <p>Python \u9879\u76ee\u5de5\u7a0b\u5316\u5f00\u53d1\u6307\u5357</p> <p>poetry</p>"},{"location":"fastp/","title":"Fastp","text":"<p>pip install cmd-fastp</p>"},{"location":"fastp/#framework","title":"Framework","text":"<p>\u8f7b\u91cf\u7ea7\u7ec8\u7aef\u6307\u4ee4\u6846\u67b6\uff0c<code>pip install cmd-fastp</code>\u5373\u53ef\u5728\u81ea\u5df1\u7684\u9879\u76ee\u63a5\u5165\u3002\u53ea\u8981\u521b\u5efa\u4e00\u4e2a\u5b58\u653e\u547d\u4ee4\u7684\u6587\u4ef6\u5939cmds\u5373\u53ef\u3002</p> <p>\u521d\u59cb\u5316\u6846\u67b6 <pre><code>import fastp,os\ndef entry():\n    fastp.load_cmds(os.path.dirname(__file__), 'cmds')</code></pre></p> <p>\u5728cmds\u76ee\u5f55\u4e0b\u9762\u7f16\u5199\u81ea\u5df1\u7684\u6307\u4ee4</p> <pre><code>from fastp import BaseCommand\nfrom fastp import (\n    get_model, get_brand, get_name,\n    get_wm_size, get_wm_density, get_android_version,\n    get_imeis, get_ip_and_mac, get_board,\n    get_abilist, get_cpu_core_size, get_heap_size,\n)\nfrom fastp import print_with_bar\n\n\nclass DeviceInfo(BaseCommand):\n    # \u58f0\u660e\u6307\u4ee4\u7684\u529f\u80fd\n    def _create_parser(self, p):\n        pyadb_parser = p.add_parser('device-info')\n        pyadb_parser.add_argument('-b', '--basic', action='store_true',\n                                  help='device basic info')\n        pyadb_parser.add_argument('--top_activity', action='store_true',\n                                  help='top activity')\n        pyadb_parser.add_argument(\n            '-i', '--imei', action='store_true', help='get imei')\n        return pyadb_parser\n\n    # \u83b7\u53d6\u6307\u4ee4\u4e2d\u7684\u6570\u636e\n    def _parse_args(self, args: \"ArgumentParser\"):\n        self.__basic = args.basic\n\n    # \u6267\u884c\u6307\u4ee4\u7684\u903b\u8f91\n    def _execute(self):\n        if self.__basic:\n            print_with_bar(0, 'model:', get_model(self._serial_no))\n            print_with_bar(1, 'brand:', get_brand(self._serial_no))\n            print_with_bar(2, 'name:', get_name(self._serial_no))\n            print_with_bar(3, 'wm size:', get_wm_size(self._serial_no))\n            print_with_bar(4, 'wm density:', get_wm_density(self._serial_no))\n            print_with_bar(5, 'android version:',\n                           get_android_version(self._serial_no))\n            print_with_bar(6, 'imei:', get_imeis(self._serial_no))\n            print_with_bar(7, 'ip/mac:', get_ip_and_mac(self._serial_no))\n            print_with_bar(8, 'board:', get_board(self._serial_no))\n            print_with_bar(9, 'abilist:', get_abilist(self._serial_no))\n            print_with_bar(10, 'cpu core size:',\n                           get_cpu_core_size(self._serial_no))\n            print_with_bar(11, 'heap size/m:', get_heap_size(self._serial_no))\n</code></pre>"},{"location":"padb/","title":"Padb","text":"<p>hi , padb</p> <p>pip install padb</p>"},{"location":"padb/#get-started","title":"Get Started","text":"<ul> <li> <p>pip install padb</p> </li> <li> <p>padb --help <pre><code>usage: command line\n\npositional arguments:\n  {device-info,log-info}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -s SERIAL_NO, --serial SERIAL_NO\n                        use device with given serial\n</code></pre></p> </li> <li> <p>padb device-info <pre><code>usage: command line device-info [-h] [-b] [--top_activity] [-i]\n\noptional arguments:\n  -h, --help      show this help message and exit\n  -b, --basic     device basic info\n  --top_activity  top activity\n  -i, --imei      get imei</code></pre> padb device-info -b <pre><code>[device-info:b/HONOR s/CUYDU19701014125 cid/A00000AD7B3287] &gt;&gt; parse_args Namespace(basic=True, func=&lt;bound method BaseCommand.__execute of &lt;padb.cmd.device_info.DeviceInfo object at 0x102d06f28&gt;&gt;, imei=False, serial_no='', top_activity=False)\n[device-info:b/HONOR s/CUYDU19701014125 cid/A00000AD7B3287] &gt;&gt; execute\n [=     ] model:YAL-AL00\n [ =    ] brand:HONOR\n [  =   ] name:YAL-AL00\n [   =  ] wm size:(1080, 2340)\n [    = ] wm density:480\n [     =] android version:10\n [    = ] imei:A00000AD7B3287\n [   =  ] ip/mac:('192.168.1.102/24', '0x00001043')\n [  =   ] board:YAL\n [ =    ] abilist:['arm64-v8a', 'armeabi-v7a', 'armeabi']\n [=     ] cpu core size:8\n [ =    ] heap size/m:512\n</code></pre></p> </li> <li>padb log-info <pre><code>usage: command line log-info [-h] [--tags TAGS]\n                             [--format {none,brief,process,tag,raw,time,threadtime,long}]\n                             [-e]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --tags TAGS           tag\n  --format {none,brief,process,tag,raw,time,threadtime,long}\n                        format\n  -e, --event           event</code></pre></li> </ul> <p></p>"},{"location":"padb/#reference","title":"Reference:","text":"<p>awesome adb</p> <p>Android\u3011ADB\u5de5\u5177\u539f\u7406\u63a2\u7a76</p> <p>python\u4ee3\u7801\u89c4\u8303</p>"}]}